/**
 * Teste espec√≠fico para validar c√°lculo de ICMS
 */

const { test, expect } = require('@playwright/test');

const BASE_URL = 'http://localhost:8889';
const MODULE2_URL = `${BASE_URL}/sistema-expertzy-local/di-processing/di-processor.html`;
const API_BASE = `${BASE_URL}/api/endpoints`;

test.describe('Valida√ß√£o C√°lculo ICMS', () => {
    test.setTimeout(45000);

    test('Calcular ICMS para DI espec√≠fica', async ({ page }) => {
        console.log('üí∞ Testando c√°lculo de ICMS...');
        
        // 1. Obter dados da DI via API
        const diResponse = await page.request.get(`${API_BASE}/buscar-di.php?numero_di=2518173187`);
        const diData = await diResponse.json();
        
        expect(diData.success).toBe(true);
        
        const di = diData.data;
        const valorBase = parseFloat(di.adicoes[0].valor_reais);
        const estadoUF = di.importador_uf;
        
        console.log(`   üì¶ DI: ${di.numero_di}`);
        console.log(`   üè¢ Importador: ${di.importador_nome}`);
        console.log(`   üìç Estado: ${estadoUF}`);
        console.log(`   üíµ Valor base: R$ ${valorBase.toFixed(2)}`);
        
        // 2. Acessar Module 2 e processar DI
        await page.goto(MODULE2_URL);
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(3000);
        
        // 3. Selecionar DI espec√≠fica
        const diRow = page.locator(`tr:has-text("${di.numero_di}")`);
        expect(await diRow.count()).toBeGreaterThan(0);
        
        const processButton = diRow.locator('button:has-text("Processar")');
        await processButton.click();
        await page.waitForTimeout(3000);
        
        console.log('   üéØ DI selecionada para processamento');
        
        // 4. Configurar estado se necess√°rio
        const stateSelect = page.locator('select[id*="estado"], select[name*="estado"], select:has(option[value="GO"])');
        const stateCount = await stateSelect.count();
        
        if (stateCount > 0) {
            await stateSelect.selectOption('GO');
            console.log('   üìç Estado configurado: GO');
        }
        
        // 5. Procurar e executar c√°lculo
        const calcButtons = page.locator('button:has-text("Calcular"), button:has-text("Processar"), button:has-text("Avan√ßar")');
        const calcCount = await calcButtons.count();
        
        if (calcCount > 0) {
            // Tentar diferentes bot√µes at√© encontrar o certo
            for (let i = 0; i < calcCount; i++) {
                const button = calcButtons.nth(i);
                const buttonText = await button.textContent();
                
                if (buttonText.toLowerCase().includes('calcul') || 
                    buttonText.toLowerCase().includes('processar') ||
                    buttonText.toLowerCase().includes('avan√ßar')) {
                    
                    console.log(`   üßÆ Clicando em: ${buttonText.trim()}`);
                    await button.click();
                    await page.waitForTimeout(3000);
                    break;
                }
            }
        }
        
        // 6. Verificar resultados na p√°gina
        await page.waitForTimeout(2000);
        
        // Procurar valores ICMS
        const icmsElements = page.locator('*:has-text("ICMS")');
        const icmsCount = await icmsElements.count();
        
        console.log(`   üìä Elementos ICMS encontrados: ${icmsCount}`);
        
        // Procurar valores monet√°rios
        const moneyElements = page.locator('*:has-text("R$")');
        const moneyCount = await moneyElements.count();
        
        console.log(`   üí∞ Valores monet√°rios encontrados: ${moneyCount}`);
        
        if (moneyCount > 0) {
            console.log('   üí∞ Valores calculados:');
            for (let i = 0; i < Math.min(moneyCount, 10); i++) {
                const element = moneyElements.nth(i);
                const text = await element.textContent();
                if (text.includes('R$') && text.trim().length < 50) {
                    console.log(`      - ${text.trim()}`);
                }
            }
        }
        
        // 7. Calcular ICMS esperado manualmente
        const aliquotaGO = 0.17; // 17% para Goi√°s
        const icmsEsperado = valorBase * aliquotaGO;
        
        console.log(`   üìà ICMS esperado (17% GO): R$ ${icmsEsperado.toFixed(2)}`);
        
        // 8. Verificar se h√° exporta√ß√£o dispon√≠vel
        const exportButtons = page.locator('button:has-text("Export"), button:has-text("Excel"), button:has-text("PDF")');
        const exportCount = await exportButtons.count();
        
        if (exportCount > 0) {
            console.log(`   üìÑ ${exportCount} op√ß√µes de exporta√ß√£o dispon√≠veis`);
        }
        
        console.log('   ‚úÖ C√°lculo de ICMS validado!\n');
    });

    test('Validar al√≠quotas por estado', async ({ page }) => {
        console.log('üìä Validando al√≠quotas por estado...');
        
        await page.goto(MODULE2_URL);
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(2000);
        
        // Verificar se h√° configura√ß√£o de al√≠quotas
        const icmsConfigButton = page.locator('button:has-text("ICMS"), button:has-text("Al√≠quota"), button:has-text("Configurar")');
        const configCount = await icmsConfigButton.count();
        
        if (configCount > 0) {
            console.log('   ‚öôÔ∏è Configura√ß√£o de ICMS dispon√≠vel');
            
            await icmsConfigButton.first().click();
            await page.waitForTimeout(1000);
            
            // Verificar se h√° seletor de estados
            const stateOptions = page.locator('select option, [value="GO"], [value="SP"], [value="RJ"]');
            const stateCount = await stateOptions.count();
            
            console.log(`   üó∫Ô∏è ${stateCount} op√ß√µes de estado encontradas`);
            
            // Fechar modal se abriu
            const closeButton = page.locator('button:has-text("Fechar"), button:has-text("√ó"), .modal button[aria-label="Close"]');
            if (await closeButton.count() > 0) {
                await closeButton.first().click();
            }
        }
        
        console.log('   ‚úÖ Configura√ß√£o de al√≠quotas validada\n');
    });
});