/**
 * Teste Focado - Corre√ß√£o #1: ICMS Hardcoded
 * 
 * Teste espec√≠fico para validar que a corre√ß√£o ICMS funciona
 */

const { test, expect } = require('@playwright/test');
const path = require('path');

test.describe('ICMS Correction - Focused Test', () => {
    
    test.beforeEach(async ({ page }) => {
        await page.goto('http://localhost:8080/di-processing/di-processor.html');
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(2000);
    });

    test('Deve processar DI e usar ICMS din√¢mico baseado no estado', async ({ page }) => {
        console.log('üîß Testando corre√ß√£o ICMS din√¢mico');
        
        // Upload XML de Goi√°s
        const fileInput = page.locator('#xmlFile');
        await fileInput.setInputFiles(path.join(__dirname, 'fixtures/2300120746.xml'));
        
        // Aguardar processamento
        await page.waitForTimeout(2000);
        
        // Processar DI
        const processBtn = page.locator('button:has-text("Processar DI")');
        await processBtn.click();
        
        // Aguardar sucesso
        await page.waitForTimeout(5000);
        
        // Verificar se n√£o h√° erros de JavaScript no console
        page.on('console', msg => {
            if (msg.type() === 'error' && msg.text().includes('Estado do importador n√£o encontrado')) {
                throw new Error(`‚ùå CORRE√á√ÉO FALHOU: ${msg.text()}`);
            }
        });
        
        // Verificar se DI foi processada (buscar n√∫mero da DI)
        const bodyContent = await page.textContent('body');
        expect(bodyContent).toContain('2300120746');
        
        console.log('‚úÖ DI processada sem erros - corre√ß√£o ICMS funcionando');
        
        // Tentar avan√ßar para c√°lculos se poss√≠vel
        const calcularBtn = page.locator('button:has-text("Calcular"), button:has-text("Impostos")');
        if (await calcularBtn.count() > 0) {
            await calcularBtn.first().click();
            await page.waitForTimeout(2000);
            console.log('‚úÖ C√°lculos iniciados sem erros');
        }
        
        console.log('üéØ RESULTADO: Corre√ß√£o ICMS hardcoded funcionando corretamente');
    });
    
    test('Deve extrair estado corretamente da DI', async ({ page }) => {
        console.log('üîç Verificando extra√ß√£o do estado');
        
        // Interceptar chamadas para verificar estado
        await page.route('**/*', route => {
            route.continue();
        });
        
        const fileInput = page.locator('#xmlFile');
        await fileInput.setInputFiles(path.join(__dirname, 'fixtures/2300120746.xml'));
        
        await page.waitForTimeout(2000);
        
        const processBtn = page.locator('button:has-text("Processar DI")');
        await processBtn.click();
        
        await page.waitForTimeout(3000);
        
        // Verificar se estado foi extra√≠do - buscar por indicadores de Goi√°s
        const bodyContent = await page.textContent('body');
        const hasGoias = bodyContent.includes('GO') || 
                        bodyContent.includes('Goi√°s') || 
                        bodyContent.includes('GOIANIA');
        
        expect(hasGoias).toBe(true);
        console.log('‚úÖ Estado Goi√°s identificado corretamente');
    });
    
    test('Verificar que n√£o h√° mais ICMS 19% hardcoded', async ({ page }) => {
        console.log('üö´ Verificando que valor hardcoded foi removido');
        
        // Verificar o c√≥digo JavaScript n√£o cont√©m mais 0.19 ou 0.81 hardcoded
        const response = await page.request.get('http://localhost:8080/di-processing/js/di-interface.js');
        const jsContent = await response.text();
        
        // Buscar pela linha antiga (deve estar comentada ou removida)
        const hasOldHardcode = jsContent.includes('* 0.19 / 0.81; // ICMS GO = 19%');
        
        expect(hasOldHardcode).toBe(false);
        console.log('‚úÖ Hardcode ICMS 0.19/0.81 removido do c√≥digo');
        
        // Verificar que nova l√≥gica existe
        const hasNewLogic = jsContent.includes('complianceCalculator.obterAliquotaICMS') &&
                          jsContent.includes('aliquotaICMSDecimal');
        
        expect(hasNewLogic).toBe(true);
        console.log('‚úÖ Nova l√≥gica ICMS din√¢mica presente no c√≥digo');
    });
    
    test('C√≥digo deve usar fun√ß√£o obterAliquotaICMS', async ({ page }) => {
        console.log('üîß Verificando uso da fun√ß√£o obterAliquotaICMS');
        
        const response = await page.request.get('http://localhost:8080/di-processing/js/di-interface.js');
        const jsContent = await response.text();
        
        // Verificar chamada da fun√ß√£o
        expect(jsContent).toContain('complianceCalculator.obterAliquotaICMS(estado)');
        console.log('‚úÖ Fun√ß√£o obterAliquotaICMS sendo chamada corretamente');
        
        // Verificar convers√£o percentual para decimal
        expect(jsContent).toContain('aliquotaICMSPercent / 100');
        console.log('‚úÖ Convers√£o percentual para decimal implementada');
        
        // Verificar uso da f√≥rmula correta
        expect(jsContent).toContain('aliquotaICMSDecimal / (1 - aliquotaICMSDecimal)');
        console.log('‚úÖ F√≥rmula ICMS corrigida implementada');
    });
});